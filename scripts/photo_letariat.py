# scripts to modify protocol buffer files generated by gRPC_tools so that imports do not break
# an in-house alternative to protoletariat (https://github.com/cpcloud/protoletariat)
# that takes advantage of the fact that we already have most of the information we need to access files, generate text
# that matches existing and desired import statements, and make the necessary modifications to file name and file path

import re


# script to get the name of the protocol buffer files generated by grpc_tools
# when grpc_tools is used to generate files, all output files start with the same text as the .proto file_name does
# so using this script gets us the necessary prefix to which we can add _pb2(.py or .pyi) or_pb2_grpc(.py) as need
def get_protocol_buffer_file_name(input_proto_file_name) -> str:
    # Capture text after last slash, or all text if no slash
    # as this will live in $repo_name/scripts, in practice there should always be one
    pattern = r'([^/]+/?)?$'
    match = re.search(pattern, input_proto_file_name)
    result = match.group(0)
    # remove '.proto' extension
    # usage: this is only called from sibling generate_protos.py, where it is enforced that extension is '.proto'
    result = result[:-6]
    return result


def replace_pb2_import_statement(file_path, file_name) -> None:
    with open(file_path, 'r') as file:
        file_content = file.read()

    # Take statement 'import file_name as file__name'
    import_statement_to_replace = f'import {file_name} as {file_name.replace("_", "__")}'

    # Modify to 'from . import file_name as file__name'
    modified_content = file_content.replace(import_statement_to_replace,
    f'from . import {file_name} as {file_name.replace("_", "__")}')

    with open(file_path, 'w') as file:
        file.write(modified_content)
